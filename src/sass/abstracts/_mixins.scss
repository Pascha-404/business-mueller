@use './variables' as *;
@use './functions' as *;

/* Mixins for Flexbox */

// Add Flexbox Display and Direction
// row (default) | row-reverse | column | column-reverse
@mixin flexbox($direction: row) {
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;

	@if $direction == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
		-moz-box-direction: reverse;
		-moz-box-orient: horizontal;
	} @else if $direction == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
		-moz-box-direction: normal;
		-moz-box-orient: vertical;
	} @else if $direction == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
		-moz-box-direction: reverse;
		-moz-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
		-moz-box-direction: normal;
		-moz-box-orient: horizontal;
	}
	-webkit-flex-direction: $direction;
	-ms-flex-direction: $direction;
	flex-direction: $direction;
}

// Axis Alignment
// - applies to: flex containers
// flex-start (default) | flex-end | center | space-between | space-around
@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-moz-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-moz-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-moz-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $value;
		-moz-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	justify-content: $value;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-moz-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-moz-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-moz-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	align-items: $value;
}

/* Mixins for shapes */

// Round Borders
@mixin roundBorder {
	border-radius: 10px;
}

/* Mixins for placement */

// underlays a element with another.
// applys position relative to container.
// adds child element through class as underlayed element.
@mixin underlay($underlayClass, $direction: left, $portrait: false) {
	width: 85%;
	position: relative;
	z-index: 1;
	img {
		height: 100%;
		object-fit: fill;
		width: 100%;
		@if $portrait == true {
			max-width: 500px;
		}
	}

	.#{$underlayClass} {
		position: absolute;
		z-index: -1;
		height: 110%;
		top: 50%;
		object-fit: cover;

		@if $portrait == true {
			max-width: 550px;
		}

		@if $direction == left {
			left: pxToRem(72px);
			-webkit-transform: translateY(-50%);
			-ms-transform: translateY(-50%);
			transform: translateY(-50%);
		} @else if $direction == right {
			-webkit-transform: translateY(-50%) translateX(pxToRem(-72px));
			-ms-transform: translateY(-50%) translateX(pxToRem(-72px));
			transform: translateY(-50%) translateX(pxToRem(-72px));
		}
	}
}

/* Mixin for media queries */

@mixin breakpoint($breakpoint, $direction: $media-direction) {
	// Checks if value is available in breakpoints variables
	@if map-has-key($breakpoints, $breakpoint) {
		// Output
		@media (#{$direction}-width: #{map-get($breakpoints, $breakpoint)}) {
			@content;
		}
	}

	// If a plane value is passed into breakpoint it checks if a unit was given, if not px is added
	@else if unitless($breakpoint) {
		$breakpoint: $breakpoint + 0px;

		// Output
		@media (#{$direction}-width: $breakpoint) {
			@content;
		}
	}
}
